#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import datetime
import os
import json
import time

class ContentGenerator:
    def __init__(self):
        self.hf_token = os.environ.get('HF_API_TOKEN', '')
        self.text_model = "mistralai/Mistral-7B-Instruct-v0.2"
        self.image_model = "stabilityai/stable-diffusion-2-1"
        
    def wait_for_model(self, model_name):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ {model_name}...")
        
        headers = {"Authorization": f"Bearer {self.hf_token}"}
        url = f"https://api-inference.huggingface.co/models/{model_name}"
        
        for attempt in range(12):  # 2 –º–∏–Ω—É—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
            try:
                response = requests.get(url, headers=headers, timeout=10)
                if response.status_code == 200:
                    print("‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
                    return True
                elif response.status_code == 503:
                    wait_time = (attempt + 1) * 10
                    print(f"üîÑ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... ({wait_time} —Å–µ–∫)")
                    time.sleep(10)
                else:
                    print(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    time.sleep(5)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
                time.sleep(5)
        
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")
        return False

    def generate_article(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å...")
        
        if not self.wait_for_model(self.text_model):
            return self.create_fallback_article()
        
        headers = {
            "Authorization": f"Bearer {self.hf_token}",
            "Content-Type": "application/json"
        }
        
        prompt = """<s>[INST] –ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ 250-300 —Å–ª–æ–≤ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. 
        –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ. –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.
        –§–æ—Ä–º–∞—Ç: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤. [/INST]"""
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_new_tokens": 500,
                "temperature": 0.8,
                "top_p": 0.9,
                "do_sample": True,
                "return_full_text": False
            }
        }
        
        try:
            response = requests.post(
                f"https://api-inference.huggingface.co/models/{self.text_model}",
                headers=headers,
                json=payload,
                timeout=120
            )
            
            if response.status_code == 200:
                result = response.json()
                if isinstance(result, list) and len(result) > 0:
                    article = result[0]['generated_text'].strip()
                    # –û—á–∏—â–∞–µ–º –æ—Ç —Ç–µ–≥–æ–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
                    article = article.replace('[INST]', '').replace('[/INST]', '')
                    article = article.split('</s>')[0].strip()
                    print("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")
                    return article
            
            print("‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self.create_fallback_article()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return self.create_fallback_article()

    def create_fallback_article(self):
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏"""
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        
        themes = [
            "OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é GPT-4 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "Google DeepMind –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ä—ã–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ reinforcement learning",
            "–ù–æ–≤—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–†–∞–∑–≤–∏—Ç–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
        ]
        
        details = [
            "–≠—Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∏–ª–∏—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ä–µ–¥.",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ 40% –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–µ–Ω—å—à–∏—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç–∞—Ö.",
            "–ù–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –æ–±—É—á–µ–Ω–∏—é –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ò–ò."
        ]
        
        applications = [
            "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ customer service, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö.",
            "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏.",
            "–£–ª—É—á—à–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ –º–µ–Ω–µ–µ –º–æ—â–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏.",
            "–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Ö–æ–¥—è—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –º–µ–¥–∏—Ü–∏–Ω–µ, –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∏–Ω–¥—É—Å—Ç—Ä–∏—è—Ö."
        ]
        
        article = (
            f"{random.choice(themes)}. {random.choice(details)} "
            f"{random.choice(applications)} –≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç, —á—Ç–æ —ç—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ "
            f"–≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å."
        )
        
        return article

    def generate_image(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å...")
        
        if not self.wait_for_model(self.image_model):
            return self.download_fallback_image()
        
        headers = {
            "Authorization": f"Bearer {self.hf_token}",
            "Content-Type": "application/json"
        }
        
        prompts = [
            "futuristic artificial intelligence concept, neural networks, digital brain, glowing connections, blue and purple light, cyberpunk style, high technology, intricate details, 4k resolution",
            "abstract neural network architecture, data flow, connections, futuristic technology, digital art, vibrant colors, complex patterns, AI concept, machine learning",
            "high-tech AI system, quantum computing, holographic interface, futuristic technology, glowing elements, sci-fi style, advanced robotics, innovation"
        ]
        
        payload = {
            "inputs": random.choice(prompts),
            "parameters": {
                "width": 1024,
                "height": 512,
                "num_inference_steps": 25,
                "guidance_scale": 7.5
            }
        }
        
        try:
            response = requests.post(
                f"https://api-inference.huggingface.co/models/{self.image_model}",
                headers=headers,
                json=payload,
                timeout=180
            )
            
            if response.status_code == 200:
                timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
                image_filename = f"ai_image_{timestamp}.jpg"
                
                with open(image_filename, 'wb') as f:
                    f.write(response.content)
                
                print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")
                return image_filename
            
            print("‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self.download_fallback_image()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return self.download_fallback_image()

    def download_fallback_image(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            images = [
                "https://images.unsplash.com/photo-1677442135135-416f8aa26a5b?w=1024&h=512&fit=crop",
                "https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?w=1024&h=512&fit=crop",
                "https://images.unsplash.com/photo-1620712943543-bcc4688e7485?w=1024&h=512&fit=crop"
            ]
            
            response = requests.get(random.choice(images), timeout=30)
            response.raise_for_status()
            
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
            image_filename = f"ai_image_{timestamp}.jpg"
            
            with open(image_filename, 'wb') as f:
                f.write(response.content)
            
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return image_filename
            
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return None

    def prepare_for_tilda(self, article_text, image_path):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda"""
        print("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda...")
        
        tilda_data = {
            "title": "–ù–æ–≤–æ—Å—Ç–∏ –ò–ò –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
            "date": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
            "content": article_text,
            "image_path": image_path,
            "short_description": article_text[:120] + "..." if len(article_text) > 120 else article_text,
            "tags": ["AI", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            "generated_with_ai": True,
            "model_used": self.text_model
        }
        
        with open('tilda_data.json', 'w', encoding='utf-8') as f:
            json.dump(tilda_data, f, ensure_ascii=False, indent=2)
        
        with open('article.txt', 'w', encoding='utf-8') as f:
            f.write(article_text)
        
        return tilda_data

    def generate_content(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        print(f"üîë –¢–æ–∫–µ–Ω: {'–µ—Å—Ç—å' if self.hf_token else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
            article_text = self.generate_article()
            print(f"üìÑ –î–ª–∏–Ω–∞: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = self.generate_image()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            tilda_data = self.prepare_for_tilda(article_text, image_path)
            
            print("‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return tilda_data
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None

def main():
    print("ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("=" * 50)
    
    if not os.environ.get('HF_API_TOKEN'):
        print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: HF_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ Secrets GitHub")
    
    generator = ContentGenerator()
    result = generator.generate_content()
    
    if result:
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"üìÑ –°—Ç–∞—Ç—å—è: {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['image_path']}")
        print(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é: {result['generated_with_ai']}")
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("=" * 50)
        
        print("\nüìã –ü–†–ï–í–¨–Æ:")
        print(result['content'][:200] + "...")
    else:
        print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    import random
    main()
