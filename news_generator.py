#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import datetime
import os
import json
import random

class ContentGenerator:
    def __init__(self):
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API endpoints
        self.text_api_url = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium"
        self.image_api_url = "https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5"
        self.hf_token = os.environ.get('HF_API_TOKEN', '')
        
    def generate_article(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ API"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ API...")
        
        try:
            headers = {
                "Authorization": f"Bearer {self.hf_token}",
                "Content-Type": "application/json"
            }
            
            prompt = """–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. 
            –û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ. –û–±—ä–µ–º: 200-300 —Å–ª–æ–≤."""
            
            payload = {
                "inputs": prompt,
                "parameters": {
                    "max_length": 400,
                    "temperature": 0.9,
                    "do_sample": True,
                    "return_full_text": False
                }
            }
            
            response = requests.post(
                self.text_api_url,
                headers=headers,
                json=payload,
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                if isinstance(result, list) and len(result) > 0:
                    article = result[0]['generated_text'].strip()
                    print("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ API")
                    return article
            
            # –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ª–æ–∫–∞–ª—å–Ω–æ
            return self.generate_dynamic_article()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return self.generate_dynamic_article()

    def generate_dynamic_article(self):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏"""
        print("üîÑ –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...")
        
        themes = [
            "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", 
            "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞", "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ò–ò"
        ]
        
        companies = [
            "Google", "OpenAI", "Microsoft", "Meta", "DeepMind", "Amazon",
            "–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ —Å—Ç–∞—Ä—Ç–∞–ø—ã", "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏"
        ]
        
        applications = [
            "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö", 
            "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞—Ö", "—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö"
        ]
        
        theme = random.choice(themes)
        company = random.choice(companies)
        application = random.choice(applications)
        
        articles = [
            f"""–í –æ–±–ª–∞—Å—Ç–∏ {theme} –ø—Ä–æ–∏–∑–æ—à–µ–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ä—ã–≤. {company} –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é, 
            –∫–æ—Ç–æ—Ä–∞—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ —É–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤. –≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç 
            –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ {application}.

–≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç, —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á 
–∏ —É—Å–∫–æ—Ä–∏—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å.""",

            f"""–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å—Ñ–µ—Ä–µ {theme} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. 
{company} –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏.

–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è —É–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ {application} –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç promising —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. 
–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ believe, —á—Ç–æ —ç—Ç–æ –ª–∏—à—å –Ω–∞—á–∞–ª–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Ç—Ä–∞—Å–ª–∏.""",

            f"""–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±–ª–∞—Å—Ç–∏ {theme} –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç. –ö–æ–º–∞–Ω–¥–∞ –∏–∑ {company} 
—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∞ breakthrough –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏.

–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ {application} –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º—É —É–ª—É—á—à–µ–Ω–∏—é 
–∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
        ]
        
        article = random.choice(articles)
        print("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ")
        return article

    def download_image(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Unsplash
            image_urls = [
                "https://images.unsplash.com/photo-1677442135135-416f8aa26a5b?w=1024&h=512&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?w=1024&h=512&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1535223289827-42f1e9919769?w=1024&h=512&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1620712943543-bcc4688e7485?w=1024&h=512&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1542831371-29b0f74f9713?w=1024&h=512&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1546054454-aa26e2b734c7?w=1024&h=512&fit=crop&auto=format"
            ]
            
            image_url = random.choice(image_urls)
            response = requests.get(image_url, timeout=30)
            response.raise_for_status()
            
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
            image_filename = f"article_image_{timestamp}.jpg"
            
            with open(image_filename, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image_filename}")
            return image_filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    def prepare_for_tilda(self, article_text, image_path):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda"""
        print("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda...")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        descriptions = [
            "–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
            "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Å—Ñ–µ—Ä–µ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫"
        ]
        
        tilda_data = {
            "title": "–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "date": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
            "content": article_text,
            "image_path": image_path or "no_image.jpg",
            "short_description": random.choice(descriptions),
            "tags": ["AI", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"],
            "views": random.randint(100, 1000),
            "rating": round(random.uniform(4.0, 5.0), 1)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open('tilda_data.json', 'w', encoding='utf-8') as f:
            json.dump(tilda_data, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        with open('article.txt', 'w', encoding='utf-8') as f:
            f.write(article_text)
        
        return tilda_data

    def generate_content(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        print(f"üìù –¢–æ–∫–µ–Ω HF: {'–µ—Å—Ç—å' if self.hf_token else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
            article_text = self.generate_article()
            print(f"üìÑ –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = self.download_image()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è Tilda
            tilda_data = self.prepare_for_tilda(article_text, image_path)
            
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return tilda_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

def main():
    print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π AI")
    print("=" * 50)
    
    generator = ContentGenerator()
    result = generator.generate_content()
    
    if result:
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"üìÑ –°—Ç–∞—Ç—å—è: {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['image_path']}")
        print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {result['rating']}")
        print(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {result['views']}")
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ tilda_data.json –∏ article.txt")
        print("=" * 50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç–∞—Ç—å–∏
        print("\nüìã –ù–∞—á–∞–ª–æ —Å—Ç–∞—Ç—å–∏:")
        print(result['content'][:200] + "...")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")

if __name__ == "__main__":
    main()
