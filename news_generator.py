#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import datetime
import os
import json

class ContentGenerator:
    def __init__(self):
        self.hf_token = os.environ['HF_API_TOKEN']
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ API endpoints
        self.text_api_url = "https://api-inference.huggingface.co/models/EleutherAI/gpt-neo-125M"
        self.image_api_url = "https://api-inference.huggingface.co/models/google/ddpm-ema-church-256"
        
    def generate_article(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ API"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ GPT-Neo...")
        
        headers = {
            "Authorization": f"Bearer {self.hf_token}",
            "Content-Type": "application/json"
        }
        
        prompt = "Artificial intelligence news:"
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 200,
                "temperature": 0.9,
                "do_sample": True,
                "return_full_text": True
            }
        }
        
        try:
            response = requests.post(
                self.text_api_url,
                headers=headers,
                json=payload,
                timeout=60
            )
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {result}")
                
                if isinstance(result, list) and len(result) > 0:
                    article = result[0]['generated_text'].strip()
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if article.startswith(prompt):
                        article = article[len(prompt):].strip()
                    print("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                    return article
                else:
                    raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            return self.generate_fallback_article()

    def generate_fallback_article(self):
        """–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏"""
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        
        articles = [
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç impressive —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞. –ù–æ–≤—ã–µ transformer-based –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç unprecedented —Ç–æ—á–Ω–æ—Å—Ç—å –≤ understanding complex contexts.",
            "–†–∞–∑–≤–∏—Ç–∏–µ computer vision technologies –¥–æ—Å—Ç–∏–≥–ª–æ –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–ø–æ—Å–æ–±–Ω—ã accurately —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã, –ª–∏—Ü–∞ –∏ –¥–∞–∂–µ emotions —Å –≤—ã—Å–æ—á–∞–π—à–µ–π precision.",
            "Generative AI —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä—É–µ—Ç creative –∏–Ω–¥—É—Å—Ç—Ä–∏–∏. –ù–µ–π—Ä–æ—Å–µ—Ç–∏ —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç realistic –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –º—É–∑—ã–∫—É –∏ —Ç–µ–∫—Å—Ç—ã, opening new possibilities –¥–ª—è digital art.",
            "Machine learning algorithms —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–æ–ª–µ–µ efficient –∏ accessible. –ù–æ–≤—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç deploy —Å–ª–æ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–∞ edge —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö, democratizing AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."
        ]
        
        import random
        return random.choice(articles)

    def generate_image(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Unsplash
            images = [
                "https://images.unsplash.com/photo-1677442135135-416f8aa26a5b?w=1024&h=512&fit=crop",
                "https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?w=1024&h=512&fit=crop",
                "https://images.unsplash.com/photo-1620712943543-bcc4688e7485?w=1024&h=512&fit=crop",
                "https://images.unsplash.com/photo-1542831371-29b0f74f9713?w=1024&h=512&fit=crop"
            ]
            
            import random
            response = requests.get(random.choice(images), timeout=30)
            response.raise_for_status()
            
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
            image_filename = f"ai_image_{timestamp}.jpg"
            
            with open(image_filename, 'wb') as f:
                f.write(response.content)
            
            print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            return image_filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    def prepare_for_tilda(self, article_text, image_path):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda"""
        print("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda...")
        
        tilda_data = {
            "title": "–ù–æ–≤–æ—Å—Ç–∏ –ò–ò –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "date": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
            "content": article_text,
            "image_path": image_path or "default.jpg",
            "short_description": article_text[:120] + "..." if len(article_text) > 120 else article_text,
            "tags": ["AI", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            "generated_with_ai": True
        }
        
        with open('tilda_data.json', 'w', encoding='utf-8') as f:
            json.dump(tilda_data, f, ensure_ascii=False, indent=2)
        
        with open('article.txt', 'w', encoding='utf-8') as f:
            f.write(article_text)
        
        return tilda_data

    def generate_content(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        print(f"üîë –¢–æ–∫–µ–Ω: {self.hf_token[:10]}...")
        
        article_text = self.generate_article()
        print(f"üìÑ –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        image_path = self.generate_image()
        
        tilda_data = self.prepare_for_tilda(article_text, image_path)
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return tilda_data

def main():
    print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("=" * 60)
    print("üöÄ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ API –∏ —Ä–µ—Å—É—Ä—Å—ã")
    print("=" * 60)
    
    if 'HF_API_TOKEN' not in os.environ:
        raise Exception("HF_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    try:
        generator = ContentGenerator()
        result = generator.generate_content()
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print(f"üìÑ –°—Ç–∞—Ç—å—è: {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['image_path']}")
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
