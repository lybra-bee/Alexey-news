#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import datetime
import os
import json
import random

class ContentGenerator:
    def __init__(self):
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API
        self.text_apis = [
            self.try_deepinfra,
            self.try_huggingface,
            self.generate_quality_article
        ]
        
    def generate_article(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API"""
        print("üîÑ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏...")
        
        for api_method in self.text_apis:
            try:
                article = api_method()
                if article:
                    return article
            except Exception as e:
                print(f"‚ö†Ô∏è {api_method.__name__}: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        return self.generate_quality_article()

    def try_deepinfra(self):
        """–ü—Ä–æ–±—É–µ–º DeepInfra (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç)"""
        print("üîÑ –ü—Ä–æ–±—É–µ–º DeepInfra...")
        
        # DeepInfra API key (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
        api_key = os.environ.get('DEEPINFRA_API_KEY', '')
        if not api_key:
            return None
            
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "mistralai/Mistral-7B-Instruct-v0.2",
            "inputs": "–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ:",
            "parameters": {"max_length": 300}
        }
        
        response = requests.post(
            "https://api.deepinfra.com/v1/inference",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()['results'][0]['generated_text']
        return None

    def try_huggingface(self):
        """–ü—Ä–æ–±—É–µ–º Hugging Face Inference API"""
        print("üîÑ –ü—Ä–æ–±—É–µ–º Hugging Face...")
        
        hf_token = os.environ.get('HF_API_TOKEN', '')
        if not hf_token:
            return None
            
        headers = {
            "Authorization": f"Bearer {hf_token}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "inputs": "–°–æ–∑–¥–∞–π –Ω–æ–≤–æ—Å—Ç—å –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –ò–ò:",
            "parameters": {"max_length": 250}
        }
        
        response = requests.post(
            "https://api-inference.huggingface.co/models/gpt2",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            if isinstance(result, list) and len(result) > 0:
                return result[0]['generated_text']
        return None

    def generate_quality_article(self):
        """–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –ª–æ–∫–∞–ª—å–Ω–æ...")
        
        technologies = [
            "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã", "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ò–ò", 
            "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞", "–æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º",
            "–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", "–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", "–Ω–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã"
        ]
        
        companies = [
            "OpenAI", "Google DeepMind", "Microsoft Research", "Meta AI", "NVIDIA", 
            "Anthropic", "Hugging Face", "Stability AI", "Tesla AI", "Amazon Web Services"
        ]
        
        applications = [
            "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö", "—Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            "–Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö",
            "–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ", "—É–º–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö"
        ]
        
        achievements = [
            "–¥–æ–±–∏–ª–∏—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ä—ã–≤–∞ –≤ –æ–±–ª–∞—Å—Ç–∏", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É",
            "–∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ –Ω–æ–≤–µ–π—à—É—é –º–æ–¥–µ–ª—å", "–¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–µ–∫–æ—Ä–¥–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏",
            "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º", "—É–ª—É—á—à–∏–ª–∏ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º"
        ]
        
        impacts = [
            "–∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫", "—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ",
            "–¥–µ–º–æ–∫—Ä–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫", "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è",
            "—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–∞—Å—Ç—å", "–ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        ]
        
        tech = random.choice(technologies)
        company = random.choice(companies)
        app = random.choice(applications)
        achievement = random.choice(achievements)
        impact = random.choice(impacts)
        
        article = f"""
{company} {achievement} {tech}. –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ {app}, 
–ø–æ–∫–∞–∑—ã–≤–∞—è –Ω–∞ 40% –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç, —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç {impact} —Ä–µ—à–µ–Ω–∏—é —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏ —É—Å–∫–æ—Ä–∏—Ç—å 
–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 
–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç promising —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–†–∞–∑–≤–∏—Ç–∏–µ open-source —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –¥–µ–ª–∞—è –∏—Ö 
–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –∫—Ä—É–≥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π. –≠—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π 
–ø—Ä–æ—Ü–µ—Å—Å –∏ —Å–æ–∑–¥–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö breakthrough —Ä–µ—à–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ {tech}.

–ü–æ —Å–ª–æ–≤–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤, –≤ 2024 –≥–æ–¥—É –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–∏–π —Ä–æ—Å—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è 
–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—è–≤–ª–µ–Ω–∏—é –µ—â–µ –±–æ–ª–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö 
–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.
"""
        
        return article.strip()

    def generate_image(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_sources = [
            self.try_unsplash,
            self.try_pexels,
            self.try_picsum
        ]
        
        for source_method in image_sources:
            try:
                image_path = source_method()
                if image_path:
                    return image_path
            except Exception as e:
                print(f"‚ö†Ô∏è {source_method.__name__}: {e}")
                continue
        
        return None

    def try_unsplash(self):
        """–ü—Ä–æ–±—É–µ–º Unsplash"""
        themes = ["technology", "computer", "network", "data", "ai", "future"]
        theme = random.choice(themes)
        url = f"https://source.unsplash.com/1024x512/?{theme}"
        
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        
        filename = f"article_image_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        with open(filename, 'wb') as f:
            f.write(response.content)
        
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å Unsplash")
        return filename

    def try_pexels(self):
        """–ü—Ä–æ–±—É–µ–º Pexels"""
        themes = ["technology", "computer", "data", "innovation", "digital"]
        theme = random.choice(themes)
        url = f"https://images.pexels.com/photos/1024/512?{theme}"
        
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        
        filename = f"article_image_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        with open(filename, 'wb') as f:
            f.write(response.content)
        
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å Pexels")
        return filename

    def try_picsum(self):
        """–ü—Ä–æ–±—É–µ–º Picsum"""
        image_id = random.randint(1, 1000)
        url = f"https://picsum.photos/1024/512?image={image_id}"
        
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        
        filename = f"article_image_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        with open(filename, 'wb') as f:
            f.write(response.content)
        
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å Picsum")
        return filename

    def prepare_for_tilda(self, article_text, image_path):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda"""
        print("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda...")
        
        titles = [
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
            "–ü—Ä–æ—Ä—ã–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è", 
            "–ù–æ–≤–µ–π—à–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫"
        ]
        
        tilda_data = {
            "title": random.choice(titles),
            "date": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
            "content": article_text,
            "image_path": image_path or "default.jpg",
            "short_description": article_text[:150] + "..." if len(article_text) > 150 else article_text,
            "tags": ["AI", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            "generated_with_ai": True,
            "source": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
        }
        
        with open('tilda_data.json', 'w', encoding='utf-8') as f:
            json.dump(tilda_data, f, ensure_ascii=False, indent=2)
        
        with open('article.txt', 'w', encoding='utf-8') as f:
            f.write(article_text)
        
        return tilda_data

    def generate_content(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        print("üîç –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        print("=" * 60)
        
        article_text = self.generate_article()
        print(f"üìÑ –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        image_path = self.generate_image()
        
        tilda_data = self.prepare_for_tilda(article_text, image_path)
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return tilda_data

def main():
    print("ü§ñ –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π AI")
    print("=" * 60)
    print("üéØ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
    print("=" * 60)
    
    generator = ContentGenerator()
    result = generator.generate_content()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"üìÑ –°—Ç–∞—Ç—å—è: {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['image_path'] or '–Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ'}")
    print(f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(result['tags'])}")
    print(f"üîß –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}")
    print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ article.txt –∏ tilda_data.json")
    print("=" * 60)
    
    print("\nüìã –ü–†–ï–í–¨–Æ –°–¢–ê–¢–¨–ò:")
    print("=" * 40)
    print(result['content'][:200] + "...")
    print("=" * 40)

if __name__ == "__main__":
    main()
