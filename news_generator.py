#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import datetime
import os
import json
import random

class ContentGenerator:
    def __init__(self):
        self.article_templates = self._load_article_templates()
        self.image_urls = self._load_image_urls()
        
    def _load_article_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å—Ç–∞—Ç–µ–π"""
        return [
            """{company} {achievement} {technology}. –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ {application}, 
–ø–æ–∫–∞–∑—ã–≤–∞—è –Ω–∞ {improvement}% –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç, —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á 
–∏ —É—Å–∫–æ—Ä–∏—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —É–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è 
–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç promising —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–†–∞–∑–≤–∏—Ç–∏–µ open-source —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –¥–µ–ª–∞—è –∏—Ö 
–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –∫—Ä—É–≥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π.""",

            """–í –æ–±–ª–∞—Å—Ç–∏ {technology} –ø—Ä–æ–∏–∑–æ—à–µ–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ä—ã–≤. {company} {achievement}, 
—á—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤ {application}. 

–ù–æ–≤–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å {improvement}% —É–ª—É—á—à–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ 
—Å–Ω–∏–∂–∞–µ—Ç –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ. –ú–Ω–æ–≥–∏–µ —ç–∫—Å–ø–µ—Ä—Ç—ã —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –±—É–¥—É—â–µ–µ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞—Å—Ç 
–Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏ –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞—Å—Ç–∏, —á—Ç–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç 
–æ –≤—ã—Å–æ–∫–æ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–µ –¥–∞–Ω–Ω–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏.""",

            """{company} –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤ —Å—Ñ–µ—Ä–µ {technology}. {achievement} 
–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å remarkable —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {application}.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç unprecedented —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, 
—á—Ç–æ –¥–µ–ª–∞–µ—Ç –∏—Ö –ø—Ä–∏–º–µ–Ω–∏–º—ã–º–∏ –≤ —Å–∞–º—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö - –æ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.

–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç, —á—Ç–æ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥—ã –º—ã —Å—Ç–∞–Ω–µ–º —Å–≤–∏–¥–µ—Ç–µ–ª—è–º–∏ –µ—â–µ –±–æ–ª–µ–µ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π 
–≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞."""
        ]
    
    def _load_image_urls(self):
        """–°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        return [
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ AI
            "https://images.unsplash.com/photo-1677442136019-21780ecad995?w=1024&h=512&fit=crop&auto=format",
            "https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?w=1024&h=512&fit=crop&auto=format",
            "https://images.unsplash.com/photo-1535223289827-42f1e9919769?w=1024&h=512&fit=crop&auto=format",
            
            # –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –¥–∞–Ω–Ω—ã–µ
            "https://images.unsplash.com/photo-1620712943543-bcc4688e7485?w=1024&h=512&fit=crop&auto=format",
            "https://images.unsplash.com/photo-1542831371-29b0f74f9713?w=1024&h=512&fit=crop&auto=format",
            "https://images.unsplash.com/photo-1546054454-aa26e2b734c7?w=1024&h=512&fit=crop&auto=format",
            
            # –§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ
            "https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=1024&h=512&fit=crop&auto=format",
            "https://images.unsplash.com/photo-1563207153-f403bf289096?w=1024&h=512&fit=crop&auto=format",
            "https://images.unsplash.com/photo-1579829366248-204fe8413f31?w=1024&h=512&fit=crop&auto=format"
        ]

    def generate_article(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏...")
        
        companies = [
            "OpenAI", "Google DeepMind", "Microsoft Research", "Meta AI", "NVIDIA",
            "Anthropic", "Hugging Face", "Stability AI", "Tesla AI", "Amazon AI",
            "Intel Labs", "IBM Research", "Baidu Research", "Samsung AI", "Huawei Cloud"
        ]
        
        technologies = [
            "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä", "–Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π", "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ò–ò",
            "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è", "–æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞", 
            "–æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º", "–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
            "–∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π", "–Ω–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"
        ]
        
        applications = [
            "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö", "—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            "–Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
            "–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ", "—É–º–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏–≥—Ä–∞—Ö"
        ]
        
        achievements = [
            "–¥–æ–±–∏–ª–∏—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ä—ã–≤–∞ –≤ –æ–±–ª–∞—Å—Ç–∏",
            "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤ —Å—Ñ–µ—Ä–µ",
            "–∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ –Ω–æ–≤–µ–π—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è",
            "–¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–µ–∫–æ—Ä–¥–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤",
            "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è",
            "—É–ª—É—á—à–∏–ª–∏ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º"
        ]
        
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        company = random.choice(companies)
        technology = random.choice(technologies)
        application = random.choice(applications)
        achievement = random.choice(achievements)
        improvement = random.randint(30, 65)
        template = random.choice(self.article_templates)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        article = template.format(
            company=company,
            technology=technology,
            application=application,
            achievement=achievement,
            improvement=improvement
        )
        
        print("‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        return article

    def generate_image(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                image_url = random.choice(self.image_urls)
                print(f"üì° –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: {image_url}")
                
                response = requests.get(image_url, timeout=15)
                response.raise_for_status()
                
                timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
                image_filename = f"article_image_{timestamp}.jpg"
                
                with open(image_filename, 'wb') as f:
                    f.write(response.content)
                
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_filename}")
                return image_filename
                
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    print("üîÑ –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                    continue
                else:
                    print("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
                    return None

    def prepare_for_tilda(self, article_text, image_path):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda"""
        print("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda...")
        
        titles = [
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
            "–ü—Ä–æ—Ä—ã–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è", 
            "–ù–æ–≤–µ–π—à–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫",
            "–ë—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è",
            "–†–µ–≤–æ–ª—é—Ü–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
        ]
        
        tags_options = [
            ["AI", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "IT", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"],
            ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏", "data science", "big data"],
            ["–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "deep learning", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "NLP"]
        ]
        
        tilda_data = {
            "title": random.choice(titles),
            "date": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
            "content": article_text,
            "image_path": image_path or "default_image.jpg",
            "short_description": article_text[:120] + "..." if len(article_text) > 120 else article_text,
            "tags": random.choice(tags_options),
            "views": random.randint(100, 2500),
            "rating": round(random.uniform(4.2, 4.9), 1),
            "read_time": random.randint(3, 8),
            "author": random.choice(["AI –†–µ–¥–∞–∫—Ç–æ—Ä", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å", "–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò"])
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        with open('tilda_data.json', 'w', encoding='utf-8') as f:
            json.dump(tilda_data, f, ensure_ascii=False, indent=2)
        
        with open('article.txt', 'w', encoding='utf-8') as f:
            f.write(article_text)
        
        return tilda_data

    def generate_content(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        print("=" * 60)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
        article_text = self.generate_article()
        print(f"üìÑ –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path = self.generate_image()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        tilda_data = self.prepare_for_tilda(article_text, image_path)
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return tilda_data

    def show_results(self, result):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print("=" * 60)
        print(f"üìÑ –°—Ç–∞—Ç—å—è: {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['image_path']}")
        print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {result['rating']}/5")
        print(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {result['views']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {result['read_time']} –º–∏–Ω")
        print(f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {result['author']}")
        print(f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(result['tags'])}")
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ article.txt –∏ tilda_data.json")
        print("=" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç–∞—Ç—å–∏
        print("\nüìã –ü–†–ï–í–¨–Æ –°–¢–ê–¢–¨–ò:")
        print("=" * 40)
        preview = result['content'][:200] + "..." if len(result['content']) > 200 else result['content']
        print(preview)
        print("=" * 40)

def main():
    print("ü§ñ –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π AI")
    print("=" * 60)
    print("üéØ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("‚ö° –ë—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ")
    print("=" * 60)
    
    generator = ContentGenerator()
    result = generator.generate_content()
    generator.show_results(result)

if __name__ == "__main__":
    main()
