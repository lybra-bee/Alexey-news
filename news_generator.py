#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import datetime
import os
import json
import random

class ContentGenerator:
    def __init__(self):
        # OpenRouter –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.openrouter_url = "https://openrouter.ai/api/v1/chat/completions"
        
    def generate_article(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter...")
        
        try:
            headers = {
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com",  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                "X-Title": "AI News Generator"
            }
            
            prompt = """–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –Ω–∞ 250-300 —Å–ª–æ–≤ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. 
–û–ø–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ. –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π."""
            
            payload = {
                "model": "google/gemma-7b-it:free",  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": 0.8,
                "max_tokens": 500
            }
            
            response = requests.post(
                self.openrouter_url,
                headers=headers,
                json=payload,
                timeout=60
            )
            
            print(f"üìä –°—Ç–∞—Ç—É—Å OpenRouter: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                article = result['choices'][0]['message']['content'].strip()
                print("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ OpenRouter")
                return article
            else:
                print(f"‚ö†Ô∏è OpenRouter –æ—Ç–≤–µ—Ç–∏–ª: {response.text}")
                return self.generate_fallback_article()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {e}")
            return self.generate_fallback_article()

    def generate_fallback_article(self):
        """–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        
        technologies = [
            "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã", "–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ò–ò", 
            "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞", " reinforcement learning"
        ]
        
        companies = [
            "OpenAI", "Google DeepMind", "Microsoft", "Meta", "NVIDIA", 
            "Anthropic", "Hugging Face", "Stability AI"
        ]
        
        applications = [
            "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö", "—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
            "–Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ", "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"
        ]
        
        achievements = [
            "–¥–æ–±–∏–ª–∏—Å—å –ø—Ä–æ—Ä—ã–≤–∞ –≤ –æ–±–ª–∞—Å—Ç–∏", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é",
            "–∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å", "–¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏",
            "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º", "—É–ª—É—á—à–∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        ]
        
        tech = random.choice(technologies)
        company = random.choice(companies)
        app = random.choice(applications)
        achievement = random.choice(achievements)
        
        article = f"""
{company} {achievement} {tech}. –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–µ—Å–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ {app}, 
–ø–æ–∫–∞–∑—ã–≤–∞—è –Ω–∞ 40% –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ–∫–æ–ª–µ–Ω–∏—è–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç, —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á 
–∏ —É—Å–∫–æ—Ä–∏—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –∂–∏–∑–Ω—å. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —É–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è 
–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç promising —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–†–∞–∑–≤–∏—Ç–∏–µ open-source —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –¥–µ–ª–∞—è –∏—Ö 
–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –∫—Ä—É–≥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π. –≠—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π 
–ø—Ä–æ—Ü–µ—Å—Å –∏ —Å–æ–∑–¥–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö breakthrough —Ä–µ—à–µ–Ω–∏–π.
"""
        
        return article.strip()

    def generate_image(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Unsplash"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Unsplash...")
        
        try:
            # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            themes = [
                "artificial intelligence", "neural network", "technology", 
                "computer", "data", "futuristic", "cyber", "digital"
            ]
            
            theme = random.choice(themes)
            image_url = f"https://source.unsplash.com/1024x512/?{theme}"
            
            response = requests.get(image_url, timeout=30)
            response.raise_for_status()
            
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
            image_filename = f"article_image_{timestamp}.jpg"
            
            with open(image_filename, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image_filename}")
            return image_filename
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    def prepare_for_tilda(self, article_text, image_path):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda"""
        print("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda...")
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        titles = [
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
            "–ü—Ä–æ—Ä—ã–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            "–ù–æ–≤–µ–π—à–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫"
        ]
        
        tilda_data = {
            "title": random.choice(titles),
            "date": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
            "content": article_text,
            "image_path": image_path or "default.jpg",
            "short_description": article_text[:150] + "..." if len(article_text) > 150 else article_text,
            "tags": ["AI", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            "generated_with_ai": True,
            "source": "OpenRouter + Unsplash"
        }
        
        with open('tilda_data.json', 'w', encoding='utf-8') as f:
            json.dump(tilda_data, f, ensure_ascii=False, indent=2)
        
        with open('article.txt', 'w', encoding='utf-8') as f:
            f.write(article_text)
        
        return tilda_data

    def generate_content(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        print("üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º: OpenRouter (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) + Unsplash")
        print("=" * 60)
        
        article_text = self.generate_article()
        print(f"üìÑ –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        image_path = self.generate_image()
        
        tilda_data = self.prepare_for_tilda(article_text, image_path)
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return tilda_data

def main():
    print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π AI")
    print("=" * 60)
    print("üéØ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API: OpenRouter + Unsplash")
    print("‚ö° –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤")
    print("=" * 60)
    
    generator = ContentGenerator()
    result = generator.generate_content()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"üìÑ –°—Ç–∞—Ç—å—è: {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['image_path']}")
    print(f"üè∑Ô∏è –¢–µ–≥–∏: {', '.join(result['tags'])}")
    print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ article.txt –∏ tilda_data.json")
    print("=" * 60)
    
    print("\nüìã –ü–†–ï–í–¨–Æ –°–¢–ê–¢–¨–ò:")
    print("=" * 40)
    print(result['content'][:200] + "...")
    print("=" * 40)

if __name__ == "__main__":
    main()
