#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import datetime
import os
import json

class ContentGenerator:
    def __init__(self):
        self.hf_token = os.environ['HF_API_TOKEN']
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç
        self.text_api_url = "https://api-inference.huggingface.co/models/gpt2"
        self.image_api_url = "https://api-inference.huggingface.co/models/CompVis/stable-diffusion-v1-4"
        
    def generate_article(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ API"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ GPT-2...")
        
        headers = {
            "Authorization": f"Bearer {self.hf_token}",
            "Content-Type": "application/json"
        }
        
        prompt = "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:"
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": 300,
                "temperature": 0.9,
                "do_sample": True,
                "return_full_text": False
            }
        }
        
        try:
            response = requests.post(
                self.text_api_url,
                headers=headers,
                json=payload,
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                if isinstance(result, list) and len(result) > 0:
                    article = result[0]['generated_text'].strip()
                    print("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                    return article
            elif response.status_code == 503:
                # –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º again
                print("‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º 30 —Å–µ–∫—É–Ω–¥...")
                import time
                time.sleep(30)
                return self.generate_article()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

    def generate_image(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ API"""
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stable Diffusion...")
        
        headers = {
            "Authorization": f"Bearer {self.hf_token}",
            "Content-Type": "application/json"
        }
        
        prompt = "artificial intelligence neural network futuristic technology digital art"
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "width": 512,
                "height": 256,
                "num_inference_steps": 20
            }
        }
        
        try:
            response = requests.post(
                self.image_api_url,
                headers=headers,
                json=payload,
                timeout=120
            )
            
            if response.status_code == 200:
                timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
                image_filename = f"ai_image_{timestamp}.jpg"
                
                with open(image_filename, 'wb') as f:
                    f.write(response.content)
                
                print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                return image_filename
            elif response.status_code == 503:
                print("‚è≥ –ú–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º 30 —Å–µ–∫—É–Ω–¥...")
                import time
                time.sleep(30)
                return self.generate_image()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")
                
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    def prepare_for_tilda(self, article_text, image_path):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda"""
        print("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Tilda...")
        
        tilda_data = {
            "title": "–ù–æ–≤–æ—Å—Ç–∏ –ò–ò –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
            "date": datetime.datetime.now().strftime("%d.%m.%Y %H:%M"),
            "content": article_text,
            "image_path": image_path,
            "short_description": article_text[:150] + "..." if len(article_text) > 150 else article_text,
            "tags": ["AI", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
            "generated_with_ai": True
        }
        
        with open('tilda_data.json', 'w', encoding='utf-8') as f:
            json.dump(tilda_data, f, ensure_ascii=False, indent=2)
        
        with open('article.txt', 'w', encoding='utf-8') as f:
            f.write(article_text)
        
        return tilda_data

    def generate_content(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        print(f"üîë –¢–æ–∫–µ–Ω: {self.hf_token[:10]}...")
        
        article_text = self.generate_article()
        print(f"üìÑ –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        image_path = self.generate_image()
        
        tilda_data = self.prepare_for_tilda(article_text, image_path)
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return tilda_data

def main():
    print("ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    print("=" * 60)
    print("üöÄ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏:")
    print("   - GPT-2 –¥–ª—è —Ç–µ–∫—Å—Ç–∞")
    print("   - Stable Diffusion v1-4 –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    if 'HF_API_TOKEN' not in os.environ:
        raise Exception("HF_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    try:
        generator = ContentGenerator()
        result = generator.generate_content()
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print(f"üìÑ –°—Ç–∞—Ç—å—è: {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['image_path']}")
        print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("=" * 60)
        
        print("\nüìã –ü–†–ï–í–¨–Æ –°–¢–ê–¢–¨–ò:")
        print("=" * 40)
        print(result['content'][:200] + "...")
        print("=" * 40)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
