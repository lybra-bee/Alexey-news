#!/usr/bin/env python3
# -- coding: utf-8 --

import requests
import datetime
import os
import json

class NewsGenerator:
    def _init_(self):
        self.hf_token = os.environ.get('HF_API_TOKEN', '')
        self.api_url = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large"
        print(f"–¢–æ–∫–µ–Ω: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.hf_token else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
    def generate_article(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Hugging Face API"""
        try:
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not self.hf_token:
                print("‚ö†Ô∏è  –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–Ω—Ç–µ–Ω—Ç")
                return self.create_fallback_content()
            
            headers = {
                "Authorization": f"Bearer {self.hf_token}",
                "Content-Type": "application/json"
            }
            
            prompt = """
–°–æ–∑–¥–∞–π –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö. 
–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.
            """
            
            payload = {
                "inputs": prompt,
                "parameters": {
                    "max_length": 500,
                    "temperature": 0.9,
                    "do_sample": True,
                    "return_full_text": False
                }
            }
            
            print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face API...")
            response = requests.post(
                self.api_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if isinstance(result, list) and len(result) > 0:
                    print("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ API")
                    return result[0]['generated_text']
            
            # Fallback –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            print("‚ö†Ô∏è  API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self.create_fallback_content()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return self.create_fallback_content()
    
    def create_fallback_content(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        themes = [
            "–†–∞–∑–≤–∏—Ç–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –≤ 2024 –≥–æ–¥—É",
            "–ù–æ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –æ—Ç Meta –∏ Google",
            "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –∏ –º–µ–¥–∏—Ü–∏–Ω–µ",
            "–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
        ]
        
        current_theme = themes[datetime.datetime.now().day % len(themes)]
        
        return f"""
# {current_theme}

## –í–≤–µ–¥–µ–Ω–∏–µ
–í –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. {current_theme} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —Ç—Ä–µ–Ω–¥–æ–º —ç—Ç–æ–≥–æ –≥–æ–¥–∞.

## –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. 
–ù–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –º–µ–Ω—å—à–∏—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç–∞—Ö.

Open-source —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–Ω–æ—Å–∏—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã AI. 
–¢–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∫–∞–∫ Hugging Face Transformers —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –¥–µ-—Ñ–∞–∫—Ç–æ.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
–ë—É–¥—É—â–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç –º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â–µ. 
–û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥—ã –º—ã —É–≤–∏–¥–∏–º –µ—â–µ –±–æ–ª—å—à–µ –ø—Ä–æ—Ä—ã–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
    
    def format_html(self, content, image_url=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ HTML"""
        if image_url is None:
            image_html = '<div class="image-placeholder">üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ</div>'
        else:
            image_html = f'<img src="{image_url}" alt="–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è" style="max-width: 100%; border-radius: 8px;">'
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        html_content = content.replace('\n\n', '</p><p>')
        html_content = html_content.replace('\n', '<br>')
        html_content = html_content.replace('# ', '<h2>').replace('\n', '</h2>')
        html_content = html_content.replace('## ', '<h3>').replace('\n', '</h3>')
        
        return f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ù–æ–≤–æ—Å—Ç–∏ AI</title>
    <style>
        body {{
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 20px;
            background: white;
            line-height: 1.6;
        }}
        .news-container {{
            max-width: 800px;
            margin: 0 auto;
        }}
        .image-placeholder {{
            background: #ecf0f1;
            padding: 60px;
            text-align: center;
            border-radius: 8px;
            margin: 20px 0;
            font-size: 18px;
            color: #7f8c8d;
        }}
        .footer {{
            margin-top: 30px;
            padding-top: 15px;
            border-top: 1px solid #ddd;
            color: #7f8c8d;
            font-size: 14px;
        }}
        h2 {{
            color: #2c3e50;
            margin-top: 30px;
        }}
        h3 {{
            color: #34495e;
        }}
    </style>
</head>
<body>
    <div class="news-container">
        {image_html}
        <div class="content">
            {html_content}
        </div>
        <div class="footer">
            –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        </div>
    </div>
</body>
</html>
        """
    
    def update_news(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        print("üîÑ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
        article_content = self.generate_article()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ HTML
        html_content = self.format_html(article_content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open('current-news.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print("‚úÖ –§–∞–π–ª current-news.html –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True

if __name__ == "__main__":
    generator = NewsGenerator()
    success = generator.update_news()
    
    if success:
        print("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
