#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import datetime
import os
import json
import random

class NewsGenerator:
    def __init__(self):
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.hf_token = os.environ.get('HF_API_TOKEN', '')
        self.api_url = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large"
        print(f"–¢–æ–∫–µ–Ω HF: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.hf_token else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
    def generate_article(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Hugging Face API"""
        try:
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not self.hf_token:
                print("‚ö†Ô∏è  –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–Ω—Ç–µ–Ω—Ç")
                return self.create_fallback_content()
            
            headers = {
                "Authorization": f"Bearer {self.hf_token}",
                "Content-Type": "application/json"
            }
            
            prompt = """
–°–æ–∑–¥–∞–π –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö. 
–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ.
            """
            
            payload = {
                "inputs": prompt,
                "parameters": {
                    "max_length": 500,
                    "temperature": 0.9,
                    "do_sample": True,
                    "return_full_text": False
                }
            }
            
            print("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face API...")
            response = requests.post(
                self.api_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if isinstance(result, list) and len(result) > 0:
                    print("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ API")
                    return result[0]['generated_text']
            
            # Fallback –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            print("‚ö†Ô∏è  API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self.create_fallback_content()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
            return self.create_fallback_content()
    
    def generate_image(self, article_text):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
            prompt = self.create_image_prompt(article_text)
            print(f"üñºÔ∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –ø–æ –æ—á–µ—Ä–µ–¥–∏
            image_url = self.try_unsplash_api(prompt)
            if image_url:
                return image_url
                
            # Fallback - —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            return self.get_themed_fallback_image(prompt)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return self.get_themed_fallback_image("–Ω–µ–π—Ä–æ—Å–µ—Ç–∏")

    def create_image_prompt(self, article_text):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—å–∏"""
        # –ë–µ—Ä–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏
        keywords = ["–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "AI", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"]
        
        # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ —Å—Ç–∞—Ç—å–µ
        ai_terms = ["—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä", "transformer", "GPT", "LLM", "deep learning", 
                    "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "NLP", "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π AI"]
        
        content_lower = article_text.lower()
        for term in ai_terms:
            if term in content_lower:
                if "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä" in term or "transformer" in term:
                    return "transformer neural network architecture"
                elif "GPT" in term or "LLM" in term:
                    return "large language model AI"
                elif "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ" in term:
                    return "computer vision AI"
                elif "NLP" in term:
                    return "natural language processing"
                elif "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π" in term:
                    return "generative AI art"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é —Ç–µ–º–∞—Ç–∏–∫—É
        if any(word in content_lower for word in ["–º–µ–¥–∏—Ü–∏–Ω", "–∑–¥–æ—Ä–æ–≤—å", "health"]):
            return "AI in healthcare medical technology"
        elif any(word in content_lower for word in ["–Ω–∞—É—á–Ω", "research", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏"]):
            return "scientific research AI technology"
        elif any(word in content_lower for word in ["–æ–±—Ä–∞–∑–æ–≤–∞–Ω", "education", "–æ–±—É—á–µ–Ω"]):
            return "AI education technology"
        elif any(word in content_lower for word in ["—Ä–æ–±–æ—Ç", "robot", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü"]):
            return "robotics AI automation"
        
        return "artificial intelligence neural network technology"

    def try_unsplash_api(self, prompt):
        """–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Unsplash API"""
        try:
            # Unsplash Source API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
            url = f"https://source.unsplash.com/800x400/?"
            keywords = ["technology", "ai", "neural network", prompt.split()[0]]
            
            # –°–æ–∑–¥–∞–µ–º URL —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            unsplash_url = f"{url}{','.join(keywords)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            response = requests.head(unsplash_url, timeout=5)
            if response.status_code == 200:
                return unsplash_url
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Unsplash API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        return None

    def get_themed_fallback_image(self, prompt):
        """–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        theme = prompt.lower()
        
        themed_images = {
            "transformer": "https://images.unsplash.com/photo-1677442135135-416f8aa26a5b?w=800&h=400&fit=crop",
            "language": "https://images.unsplash.com/photo-1573164713714-d95e436ab8d6?w=800&h=400&fit=crop",
            "computer vision": "https://images.unsplash.com/photo-1534723328310-e82dad3ee43f?w=800&h=400&fit=crop",
            "medical": "https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?w=800&h=400&fit=crop",
            "research": "https://images.unsplash.com/photo-1507413245164-6160d8298b31?w=800&h=400&fit=crop",
            "robot": "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=400&fit=crop",
            "education": "https://images.unsplash.com/photo-1501504905252-473c47e087f8?w=800&h=400&fit=crop",
            "ai": "https://images.unsplash.com/photo-1571171637578-41bc2dd41cd2?w=800&h=400&fit=crop",
            "neural": "https://images.unsplash.com/photo-1581091226825-a6a2a5aee158?w=800&h=400&fit=crop"
        }
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º—É
        for keyword, image_url in themed_images.items():
            if keyword in theme:
                return image_url
        
        # –û–±—â–µ–µ AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ai_images = [
            "https://images.unsplash.com/photo-1571171637578-41bc2dd41cd2?w=800&h=400&fit=crop",
            "https://images.unsplash.com/photo-1581091226825-a6a2a5aee158?w=800&h=400&fit=crop",
            "https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=800&h=400&fit=crop"
        ]
        
        return random.choice(ai_images)
    
    def create_fallback_content(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        themes = [
            "–†–∞–∑–≤–∏—Ç–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –≤ 2024 –≥–æ–¥—É",
            "–ù–æ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –æ—Ç Meta –∏ Google", 
            "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI –≤ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –∏ –º–µ–¥–∏—Ü–∏–Ω–µ",
            "–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
        ]
        
        current_theme = themes[datetime.datetime.now().day % len(themes)]
        
        return f"""
# {current_theme}

## –í–≤–µ–¥–µ–Ω–∏–µ
–í –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. {current_theme} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º —Ç—Ä–µ–Ω–¥–æ–º —ç—Ç–æ–≥–æ –≥–æ–¥–∞.

## –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. 
–ù–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –º–µ–Ω—å—à–∏—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞—Ç—Ä–∞—Ç–∞—Ö.

Open-source —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–Ω–æ—Å–∏—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã AI. 
–¢–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –∫–∞–∫ Hugging Face Transformers —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –¥–µ-—Ñ–∞–∫—Ç–æ.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ  
–ë—É–¥—É—â–µ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç –º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â–µ. 
–û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥—ã –º—ã —É–≤–∏–¥–∏–º –µ—â–µ –±–æ–ª—å—à–µ –ø—Ä–æ—Ä—ã–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

*–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
        """
    
    def format_html(self, content, image_url=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ HTML"""
        if image_url is None:
            image_html = '<div class="image-placeholder">üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ</div>'
        else:
            image_html = f'<img src="{image_url}" alt="–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ —Å—Ç–∞—Ç—å–µ –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö" style="max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">'
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        html_content = content
        html_content = html_content.replace('# ', '<h2>').replace('\n', '</h2>')
        html_content = html_content.replace('## ', '<h3>').replace('\n', '</h3>')
        html_content = html_content.replace('\n\n', '</p><p>')
        html_content = html_content.replace('\n', '<br>')
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–µ–≥–∏
        html_content = html_content.replace('<h2></h2>', '').replace('<h3></h3>', '')
        
        return f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ù–æ–≤–æ—Å—Ç–∏ AI</title>
    <style>
        body {{
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 20px;
            background: white;
            line-height: 1.6;
        }}
        .news-container {{
            max-width: 800px;
            margin: 0 auto;
        }}
        .image-placeholder {{
            background: #ecf0f1;
            padding: 60px;
            text-align: center;
            border-radius: 8px;
            margin: 20px 0;
            font-size: 18px;
            color: #7f8c8d;
        }}
        .footer {{
            margin-top: 30px;
            padding-top: 15px;
            border-top: 1px solid #ddd;
            color: #7f8c8d;
            font-size: 14px;
        }}
        h2 {{
            color: #2c3e50;
            margin-top: 30px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }}
        h3 {{
            color: #34495e;
            margin-top: 25px;
        }}
        p {{
            margin: 15px 0;
            text-align: justify;
        }}
        .content {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #3498db;
        }}
        img {{
            transition: transform 0.3s ease;
        }}
        img:hover {{
            transform: scale(1.02);
        }}
    </style>
</head>
<body>
    <div class="news-container">
        {image_html}
        <div class="content">
            {html_content}
        </div>
        <div class="footer">
            –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        </div>
    </div>
</body>
</html>
        """
    
    def update_news(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        print("üîÑ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
        article_content = self.generate_article()
        print("‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = self.generate_image(article_content)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ HTML
        html_content = self.format_html(article_content, image_url)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open('current-news.html', 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print("‚úÖ –§–∞–π–ª current-news.html –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        return True

if __name__ == "__main__":
    generator = NewsGenerator()
    success = generator.update_news()
    
    if success:
        print("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
